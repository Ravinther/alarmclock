package com.millennialmedia.android;

import android.content.Context;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.text.TextUtils;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.net.MalformedURLException;
import java.security.MessageDigest;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

class MRaid {
    private static final String KEY_MMJS_URL = "KEY_MMJS_URL";
    private static final String MMJS_1_4_PART1 = "";
    private static final String MMJS_1_4_PART2 = "";
    static final String MRAID_JS_FILE_NAME = "mraid.js";
    private static final String MRAID_JS_REPLACE_HEAD_PATTERN = "<head>";
    static final String MRAID_JS_REPLACE_IDENTIFIER = "<script src=\"mraid.js\"></script>";
    private static final String MRAID_JS_REPLACE_PATTERN = "<script.*src=[\"|']mraid\\.js[\"|']";
    private static final String ORIGINAL_MMJS_URL = "http://lp.mydas.mobi/assets/mmjs/1.4/mm.js";
    static final String STATE_DEFAULT = "default";
    static final String STATE_EXPANDED = "expanded";
    static final String STATE_HIDDEN = "hidden";
    static final String STATE_LOADING = "loading";
    static WeakReference finishedRef;

    /* renamed from: com.millennialmedia.android.MRaid.1 */
    static class C25021 implements Runnable {
        final /* synthetic */ Context val$context;
        final /* synthetic */ String val$url;

        C25021(String str, Context context) {
            this.val$url = str;
            this.val$context = context;
        }

        public void run() {
            try {
                Log.m9726w("MMJS -  download start (" + this.val$url + ")");
                HttpResponse response = new DefaultHttpClient().execute(new HttpGet(this.val$url));
                Log.m9726w("MMJS -  download finish (" + this.val$url + ")");
                if (MRaid.saveMRaid(this.val$context, response.getEntity().getContent())) {
                    if (MRaid.storeMraidUrl(this.val$context, this.val$url)) {
                        Log.m9726w("MMJS -  download saved (" + this.val$url + ")");
                    }
                    if (MRaid.finishedRef != null) {
                        Finished fin = (Finished) MRaid.finishedRef.get();
                        if (fin != null) {
                            fin.finished();
                        }
                    }
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IllegalStateException e2) {
                e2.printStackTrace();
            } catch (IOException e3) {
                e3.printStackTrace();
            }
        }
    }

    interface Finished {
        void finished();
    }

    MRaid() {
    }

    static boolean isMRaidAd(String content) {
        if (content == null) {
            return false;
        }
        return Pattern.compile(MRAID_JS_REPLACE_PATTERN).matcher(content).find();
    }

    static String injectMraidJs(Context context, String content) {
        Matcher matcher = Pattern.compile(MRAID_JS_REPLACE_PATTERN).matcher(content);
        String mraid = getMRaidJsPath(context);
        Log.m9711d("Mraid path: " + getMRaidJsPath(context));
        if (matcher.find()) {
            content = matcher.replaceFirst("<script src=\"" + mraid + "\"");
        } else if (content.indexOf(MRAID_JS_REPLACE_HEAD_PATTERN) == -1) {
            content = "<script src=\"" + mraid + "\"></script>" + content;
        } else {
            matcher = Pattern.compile(MRAID_JS_REPLACE_HEAD_PATTERN).matcher(content);
            if (matcher.find()) {
                content = matcher.replaceFirst("<head><script src=\"" + mraid + "\"></script>");
            }
        }
        if (content.indexOf("<html>") == -1) {
            return "<html><head></head><body style='margin:0;padding:0;'>" + content + "</body></html>";
        }
        return content;
    }

    static void setCallbackRef(Finished callback) {
        finishedRef = new WeakReference(callback);
    }

    static void downloadMraidJs(Context context, String url) {
        if (!TextUtils.isEmpty(url)) {
            ThreadUtils.execute(new C25021(url, context));
        }
    }

    static boolean storeMraidUrl(Context context, String url) {
        if (TextUtils.isEmpty(url)) {
            return false;
        }
        Editor editor = context.getSharedPreferences("MillennialMediaSettings", 0).edit();
        editor.putString(KEY_MMJS_URL, url);
        editor.commit();
        return true;
    }

    private static File getMRaidJsFile(Context context) {
        return new File(AdCache.getCacheDirectory(context), MRAID_JS_FILE_NAME);
    }

    static String getMRaidJsPath(Context context) {
        return Uri.fromFile(getMRaidJsFile(context)).toString();
    }

    static String getMMJSStats(Context context) {
        Throwable th;
        if (!hasMraidLocally(context)) {
            return "No MMJS Downloaded!";
        }
        Date date;
        File mmjs = getMRaidJsFile(context);
        BufferedReader reader = null;
        FileInputStream fileStream = null;
        String md5Hash = "";
        String buildDate = "";
        String version = "";
        try {
            FileInputStream fileStream2 = new FileInputStream(mmjs);
            try {
                byte[] contents = new byte[((int) mmjs.length())];
                fileStream2.read(contents);
                md5Hash = MMSDK.byteArrayToString(MessageDigest.getInstance("MD5").digest(contents));
                mmjs = getMRaidJsFile(context);
                BufferedReader reader2 = new BufferedReader(new FileReader(mmjs));
                int i = 0;
                while (i < 10) {
                    try {
                        String line = reader2.readLine();
                        if (line == null) {
                            break;
                        }
                        if (!TextUtils.isEmpty(line)) {
                            if (line.contains("* Built") && TextUtils.isEmpty(buildDate)) {
                                buildDate = line;
                                Log.m9711d("MMJS BuildDate:" + buildDate);
                            }
                            if (line.contains("* Version") && TextUtils.isEmpty(version)) {
                                version = line;
                                Log.m9711d("MMJS Version:" + version);
                            }
                            if (!(TextUtils.isEmpty(version) || TextUtils.isEmpty(buildDate))) {
                                break;
                            }
                        }
                        i++;
                    } catch (Exception e) {
                        fileStream = fileStream2;
                        reader = reader2;
                    } catch (Throwable th2) {
                        th = th2;
                        fileStream = fileStream2;
                        reader = reader2;
                    }
                }
                if (fileStream2 != null) {
                    try {
                        fileStream2.close();
                    } catch (Exception e2) {
                        fileStream = fileStream2;
                        reader = reader2;
                    }
                }
                if (reader2 != null) {
                    reader2.close();
                }
                fileStream = fileStream2;
                reader = reader2;
            } catch (Exception e3) {
                fileStream = fileStream2;
                if (fileStream != null) {
                    try {
                        fileStream.close();
                    } catch (Exception e4) {
                    }
                }
                if (reader != null) {
                    reader.close();
                }
                date = new Date(mmjs.lastModified());
                if (TextUtils.isEmpty(version)) {
                    return String.format("MMJS Stats: Version[%s] buildDate[%s] MD5[%s] dlDate[%s] Size[%d] Url[%s]", new Object[]{version, buildDate, md5Hash, date, Long.valueOf(mmjs.length()), getPreviousUrl(context)});
                }
                return String.format("MMJS Stats: buildDate[%s] MD5[%s] dlDate[%s] Size[%d] Url[%s]", new Object[]{buildDate, md5Hash, date, Long.valueOf(mmjs.length()), getPreviousUrl(context)});
            } catch (Throwable th3) {
                th = th3;
                fileStream = fileStream2;
                if (fileStream != null) {
                    try {
                        fileStream.close();
                    } catch (Exception e5) {
                        throw th;
                    }
                }
                if (reader != null) {
                    reader.close();
                }
                throw th;
            }
        } catch (Exception e6) {
            if (fileStream != null) {
                fileStream.close();
            }
            if (reader != null) {
                reader.close();
            }
            date = new Date(mmjs.lastModified());
            if (TextUtils.isEmpty(version)) {
                return String.format("MMJS Stats: buildDate[%s] MD5[%s] dlDate[%s] Size[%d] Url[%s]", new Object[]{buildDate, md5Hash, date, Long.valueOf(mmjs.length()), getPreviousUrl(context)});
            }
            return String.format("MMJS Stats: Version[%s] buildDate[%s] MD5[%s] dlDate[%s] Size[%d] Url[%s]", new Object[]{version, buildDate, md5Hash, date, Long.valueOf(mmjs.length()), getPreviousUrl(context)});
        } catch (Throwable th4) {
            th = th4;
            if (fileStream != null) {
                fileStream.close();
            }
            if (reader != null) {
                reader.close();
            }
            throw th;
        }
        date = new Date(mmjs.lastModified());
        if (TextUtils.isEmpty(version)) {
            return String.format("MMJS Stats: buildDate[%s] MD5[%s] dlDate[%s] Size[%d] Url[%s]", new Object[]{buildDate, md5Hash, date, Long.valueOf(mmjs.length()), getPreviousUrl(context)});
        }
        return String.format("MMJS Stats: Version[%s] buildDate[%s] MD5[%s] dlDate[%s] Size[%d] Url[%s]", new Object[]{version, buildDate, md5Hash, date, Long.valueOf(mmjs.length()), getPreviousUrl(context)});
    }

    static boolean saveMRaid(Context context, InputStream is) {
        Exception e;
        Throwable th;
        File mraidJsFile = new File(AdCache.getCacheDirectory(context), MRAID_JS_FILE_NAME);
        Log.m9724v("Saving mraid js to %s", mraidJsFile);
        FileOutputStream fileOutputStream = null;
        try {
            FileOutputStream out = new FileOutputStream(mraidJsFile);
            try {
                byte[] buf = new byte[1024];
                while (true) {
                    int numread = is.read(buf);
                    if (numread <= 0) {
                        break;
                    }
                    out.write(buf, 0, numread);
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                }
                fileOutputStream = out;
                return true;
            } catch (Exception e3) {
                e = e3;
                fileOutputStream = out;
            } catch (Throwable th2) {
                th = th2;
                fileOutputStream = out;
            }
        } catch (Exception e4) {
            e = e4;
            if (mraidJsFile != null) {
                try {
                    mraidJsFile.delete();
                } catch (Throwable th3) {
                    th = th3;
                    if (fileOutputStream != null) {
                        try {
                            fileOutputStream.close();
                        } catch (IOException e22) {
                            e22.printStackTrace();
                        }
                    }
                    throw th;
                }
            }
            Log.m9715e("Exception downloading component mraid.js: %s", e.getMessage());
            if (fileOutputStream != null) {
                try {
                    fileOutputStream.close();
                } catch (IOException e222) {
                    e222.printStackTrace();
                }
            }
            return false;
        }
    }

    static boolean isMRaidUpdated(Context context, String mmjsUrl) {
        boolean hasMraidLocally = hasMraidLocally(context);
        if (!hasMraidLocally && ORIGINAL_MMJS_URL.equals(mmjsUrl) && saveIncludedMMJS(context, mmjsUrl)) {
            Log.m9726w("MMJS - Using bundled MMJS");
            return true;
        }
        boolean isSameUrl;
        String previousUrl = getPreviousUrl(context);
        if (TextUtils.isEmpty(previousUrl) || !previousUrl.equals(mmjsUrl)) {
            isSameUrl = false;
        } else {
            isSameUrl = true;
        }
        if (isSameUrl) {
            Log.m9726w("MMJS - same URL");
        }
        if (isSameUrl && hasMraidLocally) {
            return true;
        }
        return false;
    }

    static String getPreviousUrl(Context context) {
        return context.getSharedPreferences("MillennialMediaSettings", 0).getString(KEY_MMJS_URL, "");
    }

    static boolean hasMraidLocally(Context context) {
        File mmjs = getMRaidJsFile(context);
        if (mmjs != null) {
            Log.m9711d("@@-MMJS File location: " + mmjs.getAbsolutePath());
        }
        return mmjs != null && mmjs.exists();
    }

    static boolean saveIncludedMMJS(Context context, String mmjsUrl) {
        byte[] mmjsBytesFirst = Base64.decode(MMJS_1_4_PART1);
        byte[] mmjsBytesSecond = Base64.decode(MMJS_1_4_PART2);
        if (mmjsBytesFirst == null || mmjsBytesSecond == null) {
            return false;
        }
        byte[] mmjsComplete = new byte[(mmjsBytesFirst.length + mmjsBytesSecond.length)];
        System.arraycopy(mmjsBytesFirst, 0, mmjsComplete, 0, mmjsBytesFirst.length);
        System.arraycopy(mmjsBytesSecond, 0, mmjsComplete, mmjsBytesFirst.length, mmjsBytesSecond.length);
        if (saveMRaid(context, new ByteArrayInputStream(mmjsComplete)) && storeMraidUrl(context, mmjsUrl)) {
            return true;
        }
        return false;
    }
}
